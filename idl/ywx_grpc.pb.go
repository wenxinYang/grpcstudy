// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: idl/ywx.proto

package ywx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeserClient is the client API for Teser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeserClient interface {
	GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidReply, error)
	GetIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPReply, error)
}

type teserClient struct {
	cc grpc.ClientConnInterface
}

func NewTeserClient(cc grpc.ClientConnInterface) TeserClient {
	return &teserClient{cc}
}

func (c *teserClient) GetPid(ctx context.Context, in *PidRequest, opts ...grpc.CallOption) (*PidReply, error) {
	out := new(PidReply)
	err := c.cc.Invoke(ctx, "/ywx.Teser/GetPid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teserClient) GetIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*IPReply, error) {
	out := new(IPReply)
	err := c.cc.Invoke(ctx, "/ywx.Teser/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeserServer is the server API for Teser service.
// All implementations must embed UnimplementedTeserServer
// for forward compatibility
type TeserServer interface {
	GetPid(context.Context, *PidRequest) (*PidReply, error)
	GetIP(context.Context, *IPRequest) (*IPReply, error)
	mustEmbedUnimplementedTeserServer()
}

// UnimplementedTeserServer must be embedded to have forward compatible implementations.
type UnimplementedTeserServer struct {
}

func (UnimplementedTeserServer) GetPid(context.Context, *PidRequest) (*PidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPid not implemented")
}
func (UnimplementedTeserServer) GetIP(context.Context, *IPRequest) (*IPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP not implemented")
}
func (UnimplementedTeserServer) mustEmbedUnimplementedTeserServer() {}

// UnsafeTeserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeserServer will
// result in compilation errors.
type UnsafeTeserServer interface {
	mustEmbedUnimplementedTeserServer()
}

func RegisterTeserServer(s grpc.ServiceRegistrar, srv TeserServer) {
	s.RegisterService(&Teser_ServiceDesc, srv)
}

func _Teser_GetPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeserServer).GetPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ywx.Teser/GetPid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeserServer).GetPid(ctx, req.(*PidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teser_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeserServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ywx.Teser/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeserServer).GetIP(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Teser_ServiceDesc is the grpc.ServiceDesc for Teser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ywx.Teser",
	HandlerType: (*TeserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPid",
			Handler:    _Teser_GetPid_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Teser_GetIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/ywx.proto",
}
